{"searchDocs":[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Action/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Getting Started","url":"/Action/docs/intro#examples","content":" The module can now be used to simplify the ability to add multi-platform support to your game.  local Action = require(path.to.Action) local inputConfig: Action.InputConfig = { -- This can be changed Computer = Enum.KeyCode.E, Console = Enum.KeyCode.ButtonR2, VR = Enum.KeyCode.ButtonR2 } local buttonConfig: Action.ButtonConfig = { -- All of this can be changed Position = UDim2.fromScale(.5,.5), Size = UDim2.fromScale(.5,.5), AnchorPoint = Vector2.new(.5,.5), Title = &quot;Test Title&quot;, AspectRatio = 1, Icon = &quot;rbxassetid://133394704084657&quot;, -- Random Image } local action = Action.new(&quot;Handle&quot;, inputConfig, true, buttonConfig) action:Bind(function(name, state, obj) if state == Enum.UserInputState.Begin then print(true) -- Will print true once the player presses the E key on computer or the R2 button on VR or console end end)  ","version":"Next","tagName":"h2"},{"title":"Action","type":0,"sectionRef":"#","url":"/Action/api/Action","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Action","url":"/Action/api/Action#types","content":" ","version":null,"tagName":"h2"},{"title":"InputConfig​","type":1,"pageTitle":"Action","url":"/Action/api/Action#InputConfig","content":"&lt;/&gt; type InputConfig = { Computer: InputObject? , Console: InputObject? , VR: InputObject? } What input keys to use.  ","version":null,"tagName":"h3"},{"title":"ButtonConfig​","type":1,"pageTitle":"Action","url":"/Action/api/Action#ButtonConfig","content":"&lt;/&gt; type ButtonConfig = { Position: Udim2?, Size: Udim2?, AnchorPoint: Vector2? } Properties of the button you can edit, and what values to set them to ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Action","url":"/Action/api/Action#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Action","url":"/Action/api/Action#new","content":"&lt;/&gt; Action.new( name: string, inputs: InputConfig, createButton: boolean?, button: ButtonConfig? ) → ActionObject Constructs an ActionObject. local actionObject = Action.new()   ","version":null,"tagName":"h3"},{"title":"Bind​","type":1,"pageTitle":"Action","url":"/Action/api/Action#Bind","content":"&lt;/&gt; Action:Bind() → ( name: string, state: EnumItem , obj: InputObject ) Binds the action so you can check if the button is being used, and in what state. actionObject:Bind(function(name, state, obj) if state == Enum.UserInputState.Begin then -- Any state can be used -- Your code here end end)   ","version":null,"tagName":"h3"},{"title":"Unbind​","type":1,"pageTitle":"Action","url":"/Action/api/Action#Unbind","content":"&lt;/&gt; Action:Unbind() → () Unbind the action so it cannot be used again. Do this to prevent memory leaks. actionObject:Unbind()   ","version":null,"tagName":"h3"},{"title":"GetButton​","type":1,"pageTitle":"Action","url":"/Action/api/Action#GetButton","content":"&lt;/&gt; Action:GetButton() → ImageButton?  Get the button when the user is on mobile. This can be used to customize the button further if the module does not already support it. local button = actionObject:GetButton()   ","version":null,"tagName":"h3"},{"title":"GetInfo​","type":1,"pageTitle":"Action","url":"/Action/api/Action#GetInfo","content":"&lt;/&gt; Action:GetInfo() → { stackOrder: number, priorityLevel: number, createTouchButton: boolean, inputTypes: {any}, description: string, title: string, image: string } Get information about the actionObject. local button = actionObject:GetButton()  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}